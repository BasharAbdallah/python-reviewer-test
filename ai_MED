import csv

diseases = []
buckets = []
last_disease = ""
switch = True
with open("dataset_clean1.csv","rb") as csvfile:
	reader = csv.reader(csvfile)
	bucket = []

	for row in reader:
		disease = row[0]
		if disease!=last_disease or switch:
			last_disease = disease

			if not switch:
				buckets.append(bucket)
			print bucket
			bucket = []
			bucket.append(row[1])
			switch = False
		else:
			bucket.append(row[1])
			
'''
for bucket in buckets:
	print bucket,"\n"
'''
with open("buckets.csv","wb") as csvfile:
	writer = csv.writer(csvfile)

	for bucket in buckets:
		writer.writerow(bucket)
 ----------
 from medacy.ner.model import Model
import time 
import requests
import cv2
import operator
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D 
import json

with open('drugs.json', 'r') as f:
	drugs_dict = json.load(f)

_url = 'https://westcentralus.api.cognitive.microsoft.com/vision/v2.0/RecognizeText'
_key = "38923eb3e1e74daf9ba34045ad1d672d"
  #Here you have to paste your primary key
_maxNumRetries = 10

def processRequest( json, data, headers, params ):
	retries = 0
	result = None

	while True:
		response = requests.post(_url, json = json, data = data, headers = headers, params = params )

		if response.status_code == 429:
			print( "Message: %s" % ( response.json() ) )
			if retries <= _maxNumRetries: 
				time.sleep(1) 
				retries += 1
				continue
			else: 
				print( 'Error: failed after retrying!' )
				break
		elif response.status_code == 202:
			result = response.headers['Operation-Location']
		else:
			print( "Error code: %d" % ( response.status_code ) )
			print( "Message: %s" % ( response.json() ) )
		break
		
	return result

def getOCRTextResult( operationLocation, headers ):
	retries = 0
	result = None

	while True:
		response = requests.get(operationLocation, json=None, data=None, headers=headers, params=None)
		if response.status_code == 429:
			print("Message: %s" % (response.json()))
			if retries <= _maxNumRetries:
				time.sleep(1)
				retries += 1
				continue
			else:
				print('Error: failed after retrying!')
				break
		elif response.status_code == 200:
			result = response.json()
		else:
			print("Error code: %d" % (response.status_code))
			print("Message: %s" % (response.json()))
		break

	return result

def showResultinFile(result):
	lines = result['recognitionResult']['lines']
	for i in range(len(lines)):
		words = lines[i]['words']
		s = ""
		for word in words:
			s += word['text'] + " "
		print(s)

def showResultOnImage( result, img ):
	img = img[:, :, (2, 1, 0)]
	fig, ax = plt.subplots(figsize=(12, 12))
	ax.imshow(img, aspect='equal')

	lines = result['recognitionResult']['lines']

	for i in range(len(lines)):
		words = lines[i]['words']
		for j in range(len(words)):
			tl = (words[j]['boundingBox'][0], words[j]['boundingBox'][1])
			tr = (words[j]['boundingBox'][2], words[j]['boundingBox'][3])
			br = (words[j]['boundingBox'][4], words[j]['boundingBox'][5])
			bl = (words[j]['boundingBox'][6], words[j]['boundingBox'][7])
			text = words[j]['text']
			x = [tl[0], tr[0], tr[0], br[0], br[0], bl[0], bl[0], tl[0]]
			y = [tl[1], tr[1], tr[1], br[1], br[1], bl[1], bl[1], tl[1]]
			line = Line2D(x, y, linewidth=3.5, color='red')
			ax.add_line(line)
			ax.text(tl[0], tl[1] - 2, '{:s}'.format(text),
			bbox=dict(facecolor='blue', alpha=0.5),
			fontsize=14, color='white')

	plt.axis('off')
	plt.tight_layout()
	plt.draw()
	plt.show()

def text_from_image(img):

	# pathToFileInDisk = r'/home/thebhatman/Downloads/69107836_1116226275432174_5239825646892351488_n.jpg'
	# with open(pathToFileInDisk, 'rb') as f:
	#     data = f.read()
	data = img.read()
	params = {'mode' : 'Handwritten'}

	headers = dict()
	headers['Ocp-Apim-Subscription-Key'] = _key
	headers['Content-Type'] = 'application/octet-stream'

	json = None

	operationLocation = processRequest(json, data, headers, params)

	result = None
	if (operationLocation != None):
		headers = {}
		headers['Ocp-Apim-Subscription-Key'] = _key
		while True:
			time.sleep(1)
			result = getOCRTextResult(operationLocation, headers)
			if result['status'] == 'Succeeded' or result['status'] == 'Failed':
				break

	text_file = []
	if result is not None and result['status'] == 'Succeeded':
		data8uint = np.fromstring(data, np.uint8)
		img = cv2.cvtColor(cv2.imdecode(data8uint, cv2.IMREAD_COLOR), cv2.COLOR_BGR2RGB)
		showResultinFile(result)
		# showResultOnImage(result, img)
		all_text = result['recognitionResult']['lines']
		for i in range(len(all_text)):
			one_line = all_text[i]['words']
			each_line_as_string = ""
			for word in one_line:
				each_line_as_string += word['text'] + " "
			text_file.append(each_line_as_string)
	return text_file


def drug_extraction(img):
	model = Model.load_external('medacy_model_clinical_notes')
	all_text_as_list = text_from_image(img)
	all_text = ""
	for line in all_text_as_list:
		annotation = model.predict(all_text)
		print(annotation)
		all_text += line + " "
	print(all_text)
	annotation = model.predict(all_text)
	keys_del = []
	for key in annotation.annotations['entities'].keys():
		print(key)
		if(annotation.annotations['entities'][key][3] not in drugs_dict["drugs"]):
			keys_del.append(key)
	for key in keys_del:
		del annotation.annotations['entities'][key]
	return annotation

if __name__ == "__main__":
	drug_extraction(img)
------------------

import time 
import requests
import cv2
import operator
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.lines import Line2D 

_url = 'https://westcentralus.api.cognitive.microsoft.com/vision/v2.0/RecognizeText'
_key = "b4f1b6fcb14e447e82dc2aad77d25f76"
  #Here you have to paste your primary key
_maxNumRetries = 10

def processRequest( json, data, headers, params ):
    retries = 0
    result = None

    while True:
        response = requests.post(_url, json = json, data = data, headers = headers, params = params )

        if response.status_code == 429:
            print( "Message: %s" % ( response.json() ) )
            if retries <= _maxNumRetries: 
                time.sleep(1) 
                retries += 1
                continue
            else: 
                print( 'Error: failed after retrying!' )
                break
        elif response.status_code == 202:
            result = response.headers['Operation-Location']
        else:
            print( "Error code: %d" % ( response.status_code ) )
            print( "Message: %s" % ( response.json() ) )
        break
        
    return result

def getOCRTextResult( operationLocation, headers ):
    retries = 0
    result = None

    while True:
        response = requests.get(operationLocation, json=None, data=None, headers=headers, params=None)
        if response.status_code == 429:
            print("Message: %s" % (response.json()))
            if retries <= _maxNumRetries:
                time.sleep(1)
                retries += 1
                continue
            else:
                print('Error: failed after retrying!')
                break
        elif response.status_code == 200:
            result = response.json()
        else:
            print("Error code: %d" % (response.status_code))
            print("Message: %s" % (response.json()))
        break

    return result

def showResultinFile(result):
	lines = result['recognitionResult']['lines']
	for i in range(len(lines)):
		words = lines[i]['words']
		s = ""
		for word in words:
			s += word['text'] + " "
		print(s)

def showResultOnImage( result, img ):
    img = img[:, :, (2, 1, 0)]
    fig, ax = plt.subplots(figsize=(12, 12))
    ax.imshow(img, aspect='equal')

    lines = result['recognitionResult']['lines']

    for i in range(len(lines)):
        words = lines[i]['words']
        for j in range(len(words)):
            tl = (words[j]['boundingBox'][0], words[j]['boundingBox'][1])
            tr = (words[j]['boundingBox'][2], words[j]['boundingBox'][3])
            br = (words[j]['boundingBox'][4], words[j]['boundingBox'][5])
            bl = (words[j]['boundingBox'][6], words[j]['boundingBox'][7])
            text = words[j]['text']
            x = [tl[0], tr[0], tr[0], br[0], br[0], bl[0], bl[0], tl[0]]
            y = [tl[1], tr[1], tr[1], br[1], br[1], bl[1], bl[1], tl[1]]
            line = Line2D(x, y, linewidth=3.5, color='red')
            ax.add_line(line)
            ax.text(tl[0], tl[1] - 2, '{:s}'.format(text),
            bbox=dict(facecolor='blue', alpha=0.5),
            fontsize=14, color='white')

    plt.axis('off')
    plt.tight_layout()
    plt.draw()
    plt.show()

def text_from_image(img):

    # pathToFileInDisk = r'/home/thebhatman/Downloads/69107836_1116226275432174_5239825646892351488_n.jpg'
    # with open(pathToFileInDisk, 'rb') as f:
    #     data = f.read()
    data = img.read()
    params = {'mode' : 'Handwritten'}

    headers = dict()
    headers['Ocp-Apim-Subscription-Key'] = _key
    headers['Content-Type'] = 'application/octet-stream'

    json = None

    operationLocation = processRequest(json, data, headers, params)

    result = None
    if (operationLocation != None):
        headers = {}
        headers['Ocp-Apim-Subscription-Key'] = _key
        while True:
            time.sleep(1)
            result = getOCRTextResult(operationLocation, headers)
            if result['status'] == 'Succeeded' or result['status'] == 'Failed':
                break

    text_file = []
    if result is not None and result['status'] == 'Succeeded':
        data8uint = np.fromstring(data, np.uint8)
        img = cv2.cvtColor(cv2.imdecode(data8uint, cv2.IMREAD_COLOR), cv2.COLOR_BGR2RGB)
        showResultinFile(result)
        # showResultOnImage(result, img)
        all_text = result['recognitionResult']['lines']
        for i in range(len(all_text)):
            one_line = all_text[i]['words']
            each_line_as_string = ""
            for word in one_line:
                each_line_as_string += word['text'] + " "
            text_file.append(each_line_as_string)
    return text_file
----------------------
import csv
import itertools

def calculate_apriori_confidence(X,Y,buckets):
	occr_X = 0
	occr_Y = 0
	for bucket in buckets:
		if type(X) is list:
			if all(val in bucket for val in X):
				occr_X = int(occr_X) + 1
		else:
			if X in bucket:
				occr_X = int(occr_X) + 1

		if type(Y) is list:
			if all(val in bucket for val in Y):
				occr_Y = int(occr_Y) + 1
		else:
			if Y in bucket:
				occr_Y = int(occr_Y) + 1
	conf  = float(occr_Y)/float(occr_X)*100
# 	print "Confidence given X implies Y: ", conf,"%"
	return conf

def pred_dis(symptomlist,buckets):
	disease_score={}
	disease_bucket = {}
	score = 0
	sure = 0
	for bucket in buckets:
		bucket_len = (float(len(bucket)))
		score = set(symptomlist) & set(bucket)
		interection_len = (float(len(score)))
		score = float(len(score))/float(len(symptomlist))*100
		score_1 = interection_len/bucket_len*100
		if(score == 100 and score_1 == 100):
			sure = 1
		if score>0:
			# print(score)
			disease = get_disease_given_bucket(bucket)
			# print(disease)
			disease_score[disease] = score
			disease_bucket[disease] = bucket
		if sure:
			print("It is most likely "+ disease)
			return
	# print(disease_score)
	top_3 = sorted(disease_score.items() , reverse=True, key=lambda x: x[1])[:3]
	score = []
	score_1 = []
	symps = {}
	symptom_new = []	
	for illness in top_3:
		symptomlist_new = symptomlist.copy()
		dif = (set(disease_bucket[illness[0]])).difference(set(symptomlist))
		# print(dif)
		symptom = "fever"
		prev_confidence = 0
		while(len(dif)>0):
			symp = dif.pop()
			if(symp == ''):
				continue
			if(calculate_apriori_confidence(disease_bucket[illness[0]],symp,buckets) > prev_confidence):
				symptom = symp
		# if(symptom not in symps.keys()):
		symptom_new.append(symptom)
	return symptom_new,top_3,symptomlist,disease_bucket

def react_out(out,top_3,symptomlist,disease_bucket):
	# out = react_inp(symptom_new)
	# out = "YYY"
	i = 0
	score = []
	score_1 = []
	symps = {}
	for illness in top_3:

		symptomlist_new = symptomlist.copy()
		# if(symptom not in symps.keys()):
			# symptom_new.append(symptom)
		for i in range(len(out)):
			x = out[i]
			i+=1
			if(x == 'Y'):
				symptomlist_new.append(symptom)
				# symps[symptom] = 1
			else:
				# symps[symptom] = 0
				pass	
		# else:
		# 	if(symps[symptom]==1):
		# 		symptomlist_new.append(symptom)
				
		inters = (set(symptomlist_new) & set(disease_bucket[illness[0]]))
		score.append( float(len(inters))/float(len(symptomlist_new))*100)
		score_1.append( float(len(inters))/float(len(disease_bucket[illness[0]]))*100)
	ind = 0
	if(score[1]>score[0] or (score[1]==score[0] and score_1[1]>score_1[0])):
		ind = 1
	if(score[2]>score[ind] or (score[2]==score[ind] and score_1[2]>score_1[ind])):
		ind = 2

	print("It is most probably "+top_3[ind][0])
	return top_3[ind][0]


"""Assuming every bucket uniquely points to a disease"""
def get_disease_given_bucket(bucket):
	disease = ""
	with open("bucketmap.csv") as csvfile:
		reader = csv.reader(csvfile)
		for row in reader:
			row_clean = [i for i in row if i]
			bucket_clean = [i for i in bucket if i]
			if len(row_clean) == (len(bucket_clean)+1):
				if all(values in row_clean for values in bucket_clean):
					disease = row_clean[0]
					break
#     bucket = pd.read_csv()

	return disease

def solver(symptomlist):
	buckets = []

	with open("buckets.csv") as csvfile:
		reader = csv.reader(csvfile)
		for row in reader:
			buckets.append(row)

	# symptomlist=["suicidal","hallucinations auditory","irritable mood","agitation"]
	return pred_dis(symptomlist,buckets)
  ---------------------------
  from flask import Flask, request, render_template, jsonify
# from backend.my_azure_api import *
from backend.medicine_extractor import *
from backend.symptoms import *
import json

b,c,d = None, None, None

app = Flask(__name__)

@app.route('/')
def index():
	return render_template("main.html")

@app.route('/image', methods = ['POST'])
def solve():
	img = request.files.get('file', '')
	annotation = drug_extraction(img)
	print(type(annotation))
	return jsonify(annotation.get_entity_annotations(return_dictionary = True))

@app.route('/disease', methods = ['POST'])
def search():
	global b, c, d
	data = request.get_json()['symptoms']
	a,b,c,d = solver(data)
	return jsonify(a)
	# return solver(data)

@app.route('/find', methods = ['POST'])
def super():
	data = request.get_json()['symptoms']
	print(data)
	#return "hellll OOOOOO"
	return react_out(data, b, c, d)

if __name__ == '__main__':
   app.run(debug = True, port=3000)
---------
#https://github.com/Snehal-Reddy/MedAI
